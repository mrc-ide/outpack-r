% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/location.R
\name{outpack_location_pull_packet}
\alias{outpack_location_pull_packet}
\title{Pull a single packet from a location}
\usage{
outpack_location_pull_packet(
  id,
  location = NULL,
  recursive = NULL,
  root = NULL
)
}
\arguments{
\item{id}{The id of the packet(s) to pull}

\item{location}{Control the location that the packet can be pulled
from.  The default (\code{NULL}) will try and pull the packet from
anywhere it can be found, starting with locations that have the
highest priority.  Provide a string to limit the search to a
particular location, or provide a number to limit to locations
with at least this priority.}

\item{recursive}{If non-NULL, a logical, indicating if we should
recursively pull all packets that are referenced by the packets
specified in \code{id}.  This might copy a lot of data!  If \code{NULL},
we default to the value given by the the configuration option
\code{require_pull_recursive}.}

\item{root}{The outpack root. Will be searched for from the
current directory if not given.}
}
\value{
Invisibly, the ids of packets that were pulled
}
\description{
Pull a packet (all files) from a location into this archive. This
will make files available for use as dependencies (e.g., with
\link{outpack_packet_use_dependency})
}
\details{
The behaviour of this function will vary depending on whether or
not the destination outpack repository (i.e., \code{root}) uses a file
store or not.  If it does, then we simply import the unknown files
into the store, and this will always be fairly efficient.  If no
file store is used then for the time being we pull all files from
the upstream location, even if this means copying a file we
already know about elsewhere in the outpack archive.  We will
improve this in a future version.
}
